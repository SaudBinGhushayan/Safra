{"version":3,"sources":["../src/index.tsx","../src/components/SessionContext.tsx"],"sourcesContent":["// Types\nexport type { Session, User, SupabaseClient } from '@supabase/supabase-js';\n\n// Methods & Components\nexport * from './components/SessionContext';\n","import { AuthError, Session, SupabaseClient } from '@supabase/supabase-js';\nimport React, {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\n\nexport type SessionContext =\n  | {\n      isLoading: true;\n      session: null;\n      error: null;\n      supabaseClient: SupabaseClient;\n    }\n  | {\n      isLoading: false;\n      session: Session;\n      error: null;\n      supabaseClient: SupabaseClient;\n    }\n  | {\n      isLoading: false;\n      session: null;\n      error: AuthError;\n      supabaseClient: SupabaseClient;\n    }\n  | {\n      isLoading: false;\n      session: null;\n      error: null;\n      supabaseClient: SupabaseClient;\n    };\n\nconst SessionContext = createContext<SessionContext>({\n  isLoading: true,\n  session: null,\n  error: null,\n  supabaseClient: {} as any\n});\n\nexport interface SessionContextProviderProps {\n  supabaseClient: SupabaseClient;\n  initialSession?: Session | null;\n}\n\nexport const SessionContextProvider = ({\n  supabaseClient,\n  initialSession = null,\n  children\n}: PropsWithChildren<SessionContextProviderProps>) => {\n  const [session, setSession] = useState<Session | null>(initialSession);\n  const [isLoading, setIsLoading] = useState<boolean>(!initialSession);\n  const [error, setError] = useState<AuthError>();\n\n  useEffect(() => {\n    let mounted = true;\n\n    async function getSession() {\n      const {\n        data: { session },\n        error\n      } = await supabaseClient.auth.getSession();\n\n      // only update the react state if the component is still mounted\n      if (mounted) {\n        if (error) {\n          setError(error);\n          setIsLoading(false);\n          return;\n        }\n\n        setSession(session);\n        setIsLoading(false);\n      }\n    }\n\n    getSession();\n  }, []);\n\n  useEffect(() => {\n    const {\n      data: { subscription }\n    } = supabaseClient.auth.onAuthStateChange((event, session) => {\n      if (session && (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED')) {\n        setSession(session);\n      }\n\n      if (event === 'SIGNED_OUT') {\n        setSession(null);\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const value: SessionContext = useMemo(() => {\n    if (isLoading) {\n      return {\n        isLoading: true,\n        session: null,\n        error: null,\n        supabaseClient\n      };\n    }\n\n    if (error) {\n      return {\n        isLoading: false,\n        session: null,\n        error,\n        supabaseClient\n      };\n    }\n\n    return {\n      isLoading: false,\n      session,\n      error: null,\n      supabaseClient\n    };\n  }, [isLoading, session, error]);\n\n  return (\n    <SessionContext.Provider value={value}>{children}</SessionContext.Provider>\n  );\n};\n\nexport const useSessionContext = () => {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(\n      `useSessionContext must be used within a SessionContextProvider.`\n    );\n  }\n\n  return context;\n};\n\nexport function useSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>() {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(\n      `useSupabaseClient must be used within a SessionContextProvider.`\n    );\n  }\n\n  return context.supabaseClient as SupabaseClient<Database, SchemaName>;\n}\n\nexport const useSession = () => {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(`useSession must be used within a SessionContextProvider.`);\n  }\n\n  return context.session;\n};\n\nexport const useUser = () => {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(`useUser must be used within a SessionContextProvider.`);\n  }\n\n  return context.session?.user ?? null;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,mBAOO;AA4BP,IAAM,iBAAiB,gCAA8B;AAAA,EACnD,WAAW;AAAA,EACX,SAAS;AAAA,EACT,OAAO;AAAA,EACP,gBAAgB,CAAC;AACnB,CAAC;AAOM,IAAM,yBAAyB,CAAC;AAAA,EACrC;AAAA,EACA,iBAAiB;AAAA,EACjB;AAAA,MACoD;AACpD,QAAM,CAAC,SAAS,cAAc,2BAAyB,cAAc;AACrE,QAAM,CAAC,WAAW,gBAAgB,2BAAkB,CAAC,cAAc;AACnE,QAAM,CAAC,OAAO,YAAY,2BAAoB;AAE9C,8BAAU,MAAM;AACd,QAAI,UAAU;AAEd,gCAA4B;AAC1B,YAAM;AAAA,QACJ,MAAM,EAAE;AAAA,QACR;AAAA,UACE,MAAM,eAAe,KAAK,WAAW;AAGzC,UAAI,SAAS;AACX,YAAI,QAAO;AACT,mBAAS,MAAK;AACd,uBAAa,KAAK;AAClB;AAAA,QACF;AAEA,mBAAW,QAAO;AAClB,qBAAa,KAAK;AAAA,MACpB;AAAA,IACF;AAEA,eAAW;AAAA,EACb,GAAG,CAAC,CAAC;AAEL,8BAAU,MAAM;AACd,UAAM;AAAA,MACJ,MAAM,EAAE;AAAA,QACN,eAAe,KAAK,kBAAkB,CAAC,OAAO,aAAY;AAC5D,UAAI,YAAY,WAAU,eAAe,UAAU,oBAAoB;AACrE,mBAAW,QAAO;AAAA,MACpB;AAEA,UAAI,UAAU,cAAc;AAC1B,mBAAW,IAAI;AAAA,MACjB;AAAA,IACF,CAAC;AAED,WAAO,MAAM;AACX,mBAAa,YAAY;AAAA,IAC3B;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,QAAwB,0BAAQ,MAAM;AAC1C,QAAI,WAAW;AACb,aAAO;AAAA,QACL,WAAW;AAAA,QACX,SAAS;AAAA,QACT,OAAO;AAAA,QACP;AAAA,MACF;AAAA,IACF;AAEA,QAAI,OAAO;AACT,aAAO;AAAA,QACL,WAAW;AAAA,QACX,SAAS;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,WAAW;AAAA,MACX;AAAA,MACA,OAAO;AAAA,MACP;AAAA,IACF;AAAA,EACF,GAAG,CAAC,WAAW,SAAS,KAAK,CAAC;AAE9B,SACE,mDAAC,eAAe,UAAf;AAAA,IAAwB;AAAA,KAAe,QAAS;AAErD;AAEO,IAAM,oBAAoB,MAAM;AACrC,QAAM,UAAU,6BAAW,cAAc;AACzC,MAAI,YAAY,QAAW;AACzB,UAAM,IAAI,MACR,iEACF;AAAA,EACF;AAEA,SAAO;AACT;AAEO,6BAKH;AACF,QAAM,UAAU,6BAAW,cAAc;AACzC,MAAI,YAAY,QAAW;AACzB,UAAM,IAAI,MACR,iEACF;AAAA,EACF;AAEA,SAAO,QAAQ;AACjB;AAEO,IAAM,aAAa,MAAM;AAC9B,QAAM,UAAU,6BAAW,cAAc;AACzC,MAAI,YAAY,QAAW;AACzB,UAAM,IAAI,MAAM,0DAA0D;AAAA,EAC5E;AAEA,SAAO,QAAQ;AACjB;AAEO,IAAM,UAAU,MAAM;AAxK7B;AAyKE,QAAM,UAAU,6BAAW,cAAc;AACzC,MAAI,YAAY,QAAW;AACzB,UAAM,IAAI,MAAM,uDAAuD;AAAA,EACzE;AAEA,SAAO,oBAAQ,YAAR,mBAAiB,SAAjB,YAAyB;AAClC;","names":[]}