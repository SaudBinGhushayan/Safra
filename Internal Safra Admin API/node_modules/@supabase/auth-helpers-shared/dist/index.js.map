{"version":3,"sources":["../../../node_modules/.pnpm/tsup@5.12.9/node_modules/tsup/assets/cjs_shims.js","../../../node_modules/.pnpm/cookie@0.5.0/node_modules/cookie/index.js","../src/index.ts","../src/supabase-browser.ts","../src/utils/cookies.ts","../src/utils/helpers.ts","../src/supabase-server.ts","../src/types.ts","../src/utils/index.ts","../src/utils/errors.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n","export * from './supabase-browser';\nexport * from './supabase-server';\nexport * from './types';\nexport * from './utils';\n","import { createClient, Session } from '@supabase/supabase-js';\nimport { parse, serialize } from 'cookie';\nimport { CookieOptions, SupabaseClientOptions } from './types';\nimport { parseSupabaseCookie, stringifySupabaseSession } from './utils/cookies';\nimport { isBrowser } from './utils/helpers';\n\nexport function createBrowserSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  supabaseUrl,\n  supabaseKey,\n  options,\n  cookieOptions: {\n    name = 'supabase-auth-token',\n    domain,\n    path = '/',\n    sameSite = 'lax',\n    secure,\n    maxAge = 1000 * 60 * 60 * 24 * 365\n  } = {}\n}: {\n  supabaseUrl: string;\n  supabaseKey: string;\n  options?: SupabaseClientOptions<SchemaName>;\n  cookieOptions?: CookieOptions;\n}) {\n  return createClient<Database, SchemaName>(supabaseUrl, supabaseKey, {\n    ...options,\n    auth: {\n      storageKey: name,\n      storage: {\n        getItem(key: string) {\n          if (!isBrowser()) {\n            return null;\n          }\n\n          const cookies = parse(document.cookie);\n          const session = parseSupabaseCookie(cookies[key]);\n\n          return session ? JSON.stringify(session) : null;\n        },\n        setItem(key: string, _value: string) {\n          if (!isBrowser()) {\n            return;\n          }\n\n          let session: Session = JSON.parse(_value);\n          const value = stringifySupabaseSession(session);\n\n          document.cookie = serialize(key, value, {\n            domain,\n            path,\n            maxAge,\n            // Allow supabase-js on the client to read the cookie as well\n            httpOnly: false,\n            sameSite,\n            secure: secure ?? document.location?.protocol === 'https:'\n          });\n        },\n        removeItem(key: string) {\n          if (!isBrowser()) {\n            return;\n          }\n\n          document.cookie = serialize(key, '', {\n            domain,\n            path,\n            expires: new Date(0),\n            httpOnly: false,\n            sameSite,\n            secure\n          });\n        }\n      }\n    }\n  });\n}\n","import { Session } from '@supabase/supabase-js';\nimport { parse, serialize } from 'cookie';\n\nexport { parse as parseCookies, serialize as serializeCookie };\n\n/**\n * Filter out the cookies based on a key\n */\nexport function filterCookies(cookies: string[], key: string) {\n  const indexes = new Set(\n    cookies\n      .map((cookie) => parse(cookie))\n      .reduce((acc, cookie, i) => {\n        if (key in cookie) {\n          acc.push(i);\n        }\n\n        return acc;\n      }, new Array<number>())\n  );\n\n  return cookies.filter((_, i) => !indexes.has(i));\n}\n\n/**\n * Based on the environment and the request we know if a secure cookie can be set.\n */\nexport function isSecureEnvironment(headerHost?: string | string[]) {\n  if (!headerHost) {\n    throw new Error('The \"host\" request header is not available');\n  }\n\n  const headerHostStr = Array.isArray(headerHost) ? headerHost[0] : headerHost;\n\n  const host =\n    (headerHostStr.indexOf(':') > -1 && headerHostStr.split(':')[0]) ||\n    headerHostStr;\n  if (\n    ['localhost', '127.0.0.1'].indexOf(host) > -1 ||\n    host.endsWith('.local')\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nconst decodeBase64URL = (value: string): string => {\n  try {\n    // atob is present in all browsers and nodejs >= 16\n    // but if it is not it will throw a ReferenceError in which case we can try to use Buffer\n    // replace are here to convert the Base64-URL into Base64 which is what atob supports\n    // replace with //g regex acts like replaceAll\n    return atob(value.replace(/[-]/g, '+').replace(/[_]/g, '/'));\n  } catch (e) {\n    if (e instanceof ReferenceError) {\n      // running on nodejs < 16\n      // Buffer supports Base64-URL transparently\n      return Buffer.from(value, 'base64').toString('utf-8');\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport function parseSupabaseCookie(\n  str: string | null | undefined\n): Partial<Session> | null {\n  if (!str) {\n    return null;\n  }\n\n  try {\n    const session = JSON.parse(str);\n    if (!session) {\n      return null;\n    }\n    // Support previous cookie which was a stringified session object.\n    if (session.constructor.name === 'Object') {\n      return session;\n    }\n    if (session.constructor.name !== 'Array') {\n      throw new Error(`Unexpected format: ${session.constructor.name}`);\n    }\n\n    const [_header, payloadStr, _signature] = session[0].split('.');\n    const payload = decodeBase64URL(payloadStr);\n\n    const { exp, sub, ...user } = JSON.parse(payload);\n\n    return {\n      expires_at: exp,\n      expires_in: exp - Math.round(Date.now() / 1000),\n      token_type: 'bearer',\n      access_token: session[0],\n      refresh_token: session[1],\n      provider_token: session[2],\n      provider_refresh_token: session[3],\n      user: {\n        id: sub,\n        ...user\n      }\n    };\n  } catch (err) {\n    console.warn('Failed to parse cookie string:', err);\n    return null;\n  }\n}\n\nexport function stringifySupabaseSession(session: Session): string {\n  return JSON.stringify([\n    session.access_token,\n    session.refresh_token,\n    session.provider_token,\n    session.provider_refresh_token\n  ]);\n}\n","export function ensureArray<T>(data: T | T[]): T[] {\n  return Array.isArray(data) ? data : [data];\n}\n\nexport function isBrowser() {\n  return typeof window !== 'undefined';\n}\n","import { createClient, Session } from '@supabase/supabase-js';\nimport type { CookieSerializeOptions } from 'cookie';\nimport { CookieOptions, SupabaseClientOptions } from './types';\nimport {\n  isSecureEnvironment,\n  parseSupabaseCookie,\n  stringifySupabaseSession\n} from './utils/cookies';\n\nexport function createServerSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  supabaseUrl,\n  supabaseKey,\n  getCookie,\n  setCookie,\n  getRequestHeader,\n  options,\n  cookieOptions: {\n    name = 'supabase-auth-token',\n    domain,\n    path = '/',\n    sameSite = 'lax',\n    secure,\n    maxAge = 1000 * 60 * 60 * 24 * 365\n  } = {}\n}: {\n  supabaseUrl: string;\n  supabaseKey: string;\n  getCookie: (name: string) => string | undefined;\n  setCookie: (\n    name: string,\n    value: string,\n    options: CookieSerializeOptions\n  ) => void;\n  getRequestHeader: (name: string) => string | string[] | undefined;\n  options?: SupabaseClientOptions<SchemaName>;\n  cookieOptions?: CookieOptions;\n}) {\n  let currentSession = parseSupabaseCookie(getCookie(name)) ?? null;\n\n  return createClient<Database, SchemaName>(supabaseUrl, supabaseKey, {\n    ...options,\n    auth: {\n      detectSessionInUrl: false,\n      autoRefreshToken: false,\n      storageKey: name,\n      storage: {\n        getItem(key: string) {\n          return JSON.stringify(currentSession);\n        },\n        setItem(key: string, _value: string) {\n          let session: Session = JSON.parse(_value);\n          const value = stringifySupabaseSession(session);\n\n          currentSession = session;\n\n          setCookie(key, value, {\n            domain,\n            path,\n            maxAge,\n            // Allow supabase-js on the client to read the cookie as well\n            httpOnly: false,\n            sameSite,\n            secure: secure ?? isSecureEnvironment(getRequestHeader('host'))\n          });\n        },\n        removeItem(key: string) {\n          // don't remove the session if there isn't one\n          if (!currentSession) {\n            return;\n          }\n\n          setCookie(key, '', {\n            domain,\n            path,\n            expires: new Date(0),\n            httpOnly: false,\n            sameSite,\n            secure: secure ?? isSecureEnvironment(getRequestHeader('host'))\n          });\n        }\n      }\n    }\n  });\n}\n","import type { CookieSerializeOptions } from 'cookie';\nimport type { SupabaseClientOptions as _SupabaseClientOptions } from '@supabase/supabase-js';\n\nexport type CookieOptions = { name?: string } & Pick<\n  CookieSerializeOptions,\n  'domain' | 'secure' | 'path' | 'sameSite' | 'maxAge'\n>;\n\nexport type SupabaseClientOptions<T = 'public'> = Omit<\n  _SupabaseClientOptions<T>,\n  'auth'\n>;\n","export {\n  AccessTokenNotFound,\n  AuthHelperError,\n  CookieNotFound,\n  CookieNotSaved,\n  CallbackUrlFailed,\n  CookieNotParsed,\n  JWTPayloadFailed,\n  JWTInvalid,\n  RefreshTokenNotFound,\n  ProviderTokenNotFound,\n  type ErrorPayload\n} from './errors';\n\nexport { parseCookies, serializeCookie, filterCookies } from './cookies';\nexport { ensureArray, isBrowser } from './helpers';\n","export interface ErrorPayload {\n  type?: string;\n  message: string;\n  source?: string;\n}\n\nexport class AuthHelperError extends Error {\n  errorType: string;\n  source: string;\n\n  constructor(message: string, errorType: string) {\n    super(message);\n    this.errorType = errorType;\n    this.source = 'sb_auth_helpers';\n  }\n\n  toObj(): ErrorPayload {\n    return {\n      type: this.errorType,\n      message: this.message,\n      source: this.source\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toObj());\n  }\n}\n\nexport class CookieNotFound extends AuthHelperError {\n  constructor() {\n    super('No cookie was found!', 'cookie_not_found');\n  }\n}\n\nexport class CookieNotSaved extends AuthHelperError {\n  constructor() {\n    super('Cookies cannot be saved!', 'cookie_not_saved');\n  }\n}\n\nexport class AccessTokenNotFound extends AuthHelperError {\n  constructor() {\n    super('No access token was found!', 'cookie_not_found');\n  }\n}\n\nexport class RefreshTokenNotFound extends AuthHelperError {\n  constructor() {\n    super('No refresh token was found!', 'cookie_not_found');\n  }\n}\n\nexport class ProviderTokenNotFound extends AuthHelperError {\n  constructor() {\n    super('No provider token was found!', 'cookie_not_found');\n  }\n}\n\nexport class CookieNotParsed extends AuthHelperError {\n  constructor() {\n    super('Not able to parse cookies!', 'cookie_not_parsed');\n  }\n}\n\nexport class CallbackUrlFailed extends AuthHelperError {\n  constructor(callbackUrl: string) {\n    super(`The request to ${callbackUrl} failed!`, 'callback_url_failed');\n  }\n}\n\nexport class JWTPayloadFailed extends AuthHelperError {\n  constructor() {\n    super('Not able to parse JWT payload!', 'jwt_payload_failed');\n  }\n}\n\nexport class JWTInvalid extends AuthHelperError {\n  constructor() {\n    super('Invalid jwt!', 'jwt_invalid');\n  }\n}\n"],"mappings":"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","names":["parse","serialize","decode","import_cookie","import_supabase_js"]}