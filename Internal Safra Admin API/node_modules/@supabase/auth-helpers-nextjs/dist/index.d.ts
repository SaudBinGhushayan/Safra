import * as _supabase_supabase_js from '@supabase/supabase-js';
import { SupabaseClient } from '@supabase/supabase-js';
export { Session, SupabaseClient, User } from '@supabase/supabase-js';
import * as _supabase_supabase_js_dist_module_lib_types from '@supabase/supabase-js/dist/module/lib/types';
import { CookieOptions } from '@supabase/auth-helpers-shared';
import { GetServerSideProps, GetServerSidePropsContext, NextApiHandler, NextApiRequest, NextApiResponse } from 'next';
export { w as withMiddlewareAuth } from './withMiddlewareAuth-3d1afc35.js';
import 'next/server';

declare type AddParameters<TFunction extends (...args: any) => any, TParameters extends [...args: any]> = (...args: [...Parameters<TFunction>, ...TParameters]) => ReturnType<TFunction>;

/**
 * ## Protecting Pages with Server Side Rendering (SSR)
 * If you wrap your `getServerSideProps` with {@link withPageAuth} your props object will be augmented with
 * the user object {@link User}
 *
 * ```js
 * // pages/profile.js
 * import { withPageAuth } from '@supabase/auth-helpers-nextjs';
 *
 * export default function Profile({ user }) {
 *   return <div>Hello {user.name}</div>;
 * }
 *
 * export const getServerSideProps = withPageAuth({ redirectTo: '/login' });
 * ```
 *
 * If there is no authenticated user, they will be redirect to your home page, unless you specify the `redirectTo` option.
 *
 * You can pass in your own `getServerSideProps` method, the props returned from this will be merged with the
 * user props.
 *
 * ```js
 * // pages/protected-page.js
 * import { withPageAuth } from '@supabase/auth-helpers-nextjs';
 *
 * export default function ProtectedPage({ user, customProp }) {
 *   return <div>Protected content</div>;
 * }
 *
 * export const getServerSideProps = withPageAuth({
 *   redirectTo: '/foo',
 *   async getServerSideProps(ctx, supabase) {
 *     // Run queries with RLS on the server
 *     const { data } = await supabase.from('test').select('*');
 *     return { props: { data } };
 *   }
 * });
 * ```
 *
 * @category Server
 */
declare function withPageAuth<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database, ResponseType extends Record<string, any> = any>({ authRequired, redirectTo, getServerSideProps, cookieOptions }?: {
    authRequired?: boolean;
    redirectTo?: string;
    getServerSideProps?: AddParameters<GetServerSideProps<ResponseType>, [
        SupabaseClient<Database, SchemaName>
    ]>;
    cookieOptions?: CookieOptions;
}): (context: GetServerSidePropsContext) => Promise<any>;

/**
 * ## Protecting API routes
 * Wrap an API Route to check that the user has a valid session. If they're not logged in the handler will return a
 * 401 Unauthorized.
 *
 * ```js
 * // pages/api/protected-route.js
 * import { withApiAuth } from '@supabase/auth-helpers-nextjs';
 *
 * export default withApiAuth(async function ProtectedRoute(req, res, supabase) {
 *   // Run queries with RLS on the server
 *   const { data } = await supabase.from('test').select('*');
 *   res.json(data)
 * });
 * ```
 *
 * If you visit `/api/protected-route` without a valid session cookie, you will get a 401 response.
 *
 * @category Server
 */
declare function withApiAuth<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database, ResponseType = any>(handler: AddParameters<NextApiHandler<ResponseType>, [
    SupabaseClient<Database, SchemaName>
]>, options?: {
    cookieOptions?: CookieOptions;
}): (req: NextApiRequest, res: NextApiResponse) => Promise<void>;

declare const logger: {
    log: (message?: any, ...optionalParams: any[]) => void;
    error: (message?: any, ...optionalParams: any[]) => void;
    info: (message?: any, ...optionalParams: any[]) => void;
    debug: (message?: any, ...optionalParams: any[]) => void;
    warn: (message?: any, ...optionalParams: any[]) => void;
};

declare function createBrowserSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>({ cookieOptions }?: {
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;
declare function createServerSupabaseClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database>(context: GetServerSidePropsContext | {
    req: NextApiRequest;
    res: NextApiResponse;
}, { cookieOptions }?: {
    cookieOptions?: CookieOptions;
}): _supabase_supabase_js.SupabaseClient<Database, SchemaName, Database[SchemaName] extends _supabase_supabase_js_dist_module_lib_types.GenericSchema ? Database[SchemaName] : any>;

export { createBrowserSupabaseClient, createServerSupabaseClient, logger, withApiAuth, withPageAuth };
