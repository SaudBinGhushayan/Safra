{"version":3,"sources":["../../src/middleware/index.ts","../../src/middleware/withMiddlewareAuth.ts","../../src/constants.ts"],"sourcesContent":["export { withMiddlewareAuth } from './withMiddlewareAuth';\n","import { NextResponse } from 'next/server';\nimport { NextMiddleware } from 'next/server';\nimport {\n  CookieOptions,\n  createServerSupabaseClient,\n  parseCookies,\n  serializeCookie\n} from '@supabase/auth-helpers-shared';\nimport { SupabaseClient, User } from '@supabase/supabase-js';\nimport { PKG_NAME, PKG_VERSION } from '../constants';\n\nclass NoPermissionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoPermissionError';\n  }\n}\n\nexport const withMiddlewareAuth =\n  <\n    Database = any,\n    SchemaName extends string & keyof Database = 'public' extends keyof Database\n      ? 'public'\n      : string & keyof Database\n  >(\n    options: {\n      /**\n       * Path relative to the site root to redirect an\n       * unauthenticated visitor.\n       *\n       * The original request route will be appended via\n       * a `redirectedFrom` query parameter, ex: `?redirectedFrom=%2Fdashboard`\n       */\n      redirectTo?: string;\n      cookieOptions?: CookieOptions;\n      authGuard?: {\n        isPermitted: (\n          user: User,\n          supabase: SupabaseClient<Database, SchemaName>\n        ) => Promise<boolean>;\n        redirectTo: string;\n      };\n    } = {}\n  ): NextMiddleware =>\n  async (req) => {\n    try {\n      if (\n        !process.env.NEXT_PUBLIC_SUPABASE_URL ||\n        !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n      ) {\n        throw new Error(\n          'NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables are required!'\n        );\n      }\n\n      const res = NextResponse.next();\n\n      const supabase = createServerSupabaseClient<Database, SchemaName>({\n        supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,\n        supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n        getCookie(name) {\n          const cookies = parseCookies(req.headers.get('cookie') ?? '');\n          return cookies[name];\n        },\n        setCookie(name, value, options) {\n          const newSessionStr = serializeCookie(name, value, {\n            ...options,\n            // Allow supabase-js on the client to read the cookie as well\n            httpOnly: false\n          });\n          res.headers.append(name, newSessionStr);\n        },\n        getRequestHeader: (key) => {\n          const header = res.headers.get(key) ?? undefined;\n\n          return header;\n        },\n        options: {\n          global: {\n            headers: {\n              'X-Client-Info': `${PKG_NAME}@${PKG_VERSION}`\n            }\n          }\n        },\n        cookieOptions: options.cookieOptions\n      });\n\n      const {\n        data: { session },\n        error\n      } = await supabase.auth.getSession();\n\n      if (error) {\n        throw new Error(\n          `Authorization error, redirecting to login page: ${error.message}`\n        );\n      } else if (!session) {\n        throw new Error('No auth session, redirecting');\n      } else if (\n        options.authGuard &&\n        !(await options.authGuard.isPermitted(session.user, supabase))\n      ) {\n        throw new NoPermissionError('User is not permitted, redirecting');\n      }\n\n      // Authentication successful, forward request to protected route\n      return res;\n    } catch (err: unknown) {\n      let { redirectTo = '/' } = options;\n      if (\n        err instanceof NoPermissionError &&\n        !!options?.authGuard?.redirectTo\n      ) {\n        redirectTo = options.authGuard.redirectTo;\n      }\n      if (err instanceof Error) {\n        console.log(\n          `Could not authenticate request, redirecting to ${redirectTo}:`,\n          err\n        );\n      }\n      const redirectUrl = req.nextUrl.clone();\n      redirectUrl.pathname = redirectTo;\n      redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname);\n      // Authentication failed, redirect request\n      return NextResponse.redirect(redirectUrl);\n    }\n  };\n","export const PKG_NAME = \"@supabase/auth-helpers-nextjs\";\nexport const PKG_VERSION = \"0.4.4\";\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA6B;AAE7B,iCAKO;;;ACPA,IAAM,WAAW;AACjB,IAAM,cAAc;;;ADU3B,IAAM,oBAAN,cAAgC,MAAM;AAAA,EACpC,YAAY,SAAiB;AAC3B,UAAM,OAAO;AACb,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,qBACX,CAME,UAiBI,CAAC,MAEP,OAAO,QAAQ;AA5CjB;AA6CI,MAAI;AACF,QACE,CAAC,QAAQ,IAAI,4BACb,CAAC,QAAQ,IAAI,+BACb;AACA,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,MAAM,2BAAa,KAAK;AAE9B,UAAM,eAAW,uDAAiD;AAAA,MAChE,aAAa,QAAQ,IAAI;AAAA,MACzB,aAAa,QAAQ,IAAI;AAAA,MACzB,UAAU,MAAM;AA5DxB,YAAAA;AA6DU,cAAM,cAAU,0CAAaA,MAAA,IAAI,QAAQ,IAAI,QAAQ,MAAxB,OAAAA,MAA6B,EAAE;AAC5D,eAAO,QAAQ;AAAA,MACjB;AAAA,MACA,UAAU,MAAM,OAAOC,UAAS;AAC9B,cAAM,oBAAgB,4CAAgB,MAAM,OAAO;AAAA,UACjD,GAAGA;AAAA,UAEH,UAAU;AAAA,QACZ,CAAC;AACD,YAAI,QAAQ,OAAO,MAAM,aAAa;AAAA,MACxC;AAAA,MACA,kBAAkB,CAAC,QAAQ;AAxEnC,YAAAD;AAyEU,cAAM,UAASA,MAAA,IAAI,QAAQ,IAAI,GAAG,MAAnB,OAAAA,MAAwB;AAEvC,eAAO;AAAA,MACT;AAAA,MACA,SAAS;AAAA,QACP,QAAQ;AAAA,UACN,SAAS;AAAA,YACP,iBAAiB,GAAG,YAAY;AAAA,UAClC;AAAA,QACF;AAAA,MACF;AAAA,MACA,eAAe,QAAQ;AAAA,IACzB,CAAC;AAED,UAAM;AAAA,MACJ,MAAM,EAAE,QAAQ;AAAA,MAChB;AAAA,IACF,IAAI,MAAM,SAAS,KAAK,WAAW;AAEnC,QAAI,OAAO;AACT,YAAM,IAAI;AAAA,QACR,mDAAmD,MAAM;AAAA,MAC3D;AAAA,IACF,WAAW,CAAC,SAAS;AACnB,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAChD,WACE,QAAQ,aACR,CAAE,MAAM,QAAQ,UAAU,YAAY,QAAQ,MAAM,QAAQ,GAC5D;AACA,YAAM,IAAI,kBAAkB,oCAAoC;AAAA,IAClE;AAGA,WAAO;AAAA,EACT,SAAS,KAAP;AACA,QAAI,EAAE,aAAa,IAAI,IAAI;AAC3B,QACE,eAAe,qBACf,CAAC,GAAC,wCAAS,cAAT,mBAAoB,aACtB;AACA,mBAAa,QAAQ,UAAU;AAAA,IACjC;AACA,QAAI,eAAe,OAAO;AACxB,cAAQ;AAAA,QACN,kDAAkD;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AACA,UAAM,cAAc,IAAI,QAAQ,MAAM;AACtC,gBAAY,WAAW;AACvB,gBAAY,aAAa,IAAI,kBAAkB,IAAI,QAAQ,QAAQ;AAEnE,WAAO,2BAAa,SAAS,WAAW;AAAA,EAC1C;AACF;","names":["_a","options"]}