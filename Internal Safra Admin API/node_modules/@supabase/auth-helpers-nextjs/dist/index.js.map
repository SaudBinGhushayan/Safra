{"version":3,"sources":["../src/index.ts","../src/constants.ts","../src/middleware/withMiddlewareAuth.ts","../src/utils/withPageAuth.ts","../src/utils/withApiAuth.ts","../src/utils/log.ts"],"sourcesContent":["import {\n  CookieOptions,\n  createBrowserSupabaseClient as _createBrowserSupabaseClient,\n  createServerSupabaseClient as _createServerSupabaseClient,\n  ensureArray,\n  filterCookies,\n  serializeCookie\n} from '@supabase/auth-helpers-shared';\nimport {\n  GetServerSidePropsContext,\n  NextApiRequest,\n  NextApiResponse\n} from 'next';\nimport { PKG_NAME, PKG_VERSION } from './constants';\n\n// Types\nexport type { Session, User, SupabaseClient } from '@supabase/supabase-js';\n\n// Methods\nexport * from './middleware';\nexport { default as withPageAuth } from './utils/withPageAuth';\nexport { default as withApiAuth } from './utils/withApiAuth';\nexport { default as logger } from './utils/log';\n\nexport function createBrowserSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>({\n  cookieOptions\n}: {\n  cookieOptions?: CookieOptions;\n} = {}) {\n  if (\n    !process.env.NEXT_PUBLIC_SUPABASE_URL ||\n    !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  ) {\n    throw new Error(\n      'NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables are required!'\n    );\n  }\n\n  return _createBrowserSupabaseClient<Database, SchemaName>({\n    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,\n    supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    cookieOptions\n  });\n}\n\nexport function createServerSupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>(\n  context:\n    | GetServerSidePropsContext\n    | { req: NextApiRequest; res: NextApiResponse },\n  {\n    cookieOptions\n  }: {\n    cookieOptions?: CookieOptions;\n  } = {}\n) {\n  if (\n    !process.env.NEXT_PUBLIC_SUPABASE_URL ||\n    !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  ) {\n    throw new Error(\n      'NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables are required!'\n    );\n  }\n\n  return _createServerSupabaseClient<Database, SchemaName>({\n    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,\n    supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    getRequestHeader: (key) => context.req.headers[key],\n\n    getCookie(name) {\n      return context.req.cookies[name];\n    },\n    setCookie(name, value, options) {\n      const newSetCookies = filterCookies(\n        ensureArray(context.res.getHeader('set-cookie')?.toString() ?? []),\n        name\n      );\n      const newSessionStr = serializeCookie(name, value, {\n        ...options,\n        // Allow supabase-js on the client to read the cookie as well\n        httpOnly: false\n      });\n\n      context.res.setHeader('set-cookie', [...newSetCookies, newSessionStr]);\n    },\n    options: {\n      global: {\n        headers: {\n          'X-Client-Info': `${PKG_NAME}@${PKG_VERSION}`\n        }\n      }\n    },\n    cookieOptions\n  });\n}\n","export const PKG_NAME = \"@supabase/auth-helpers-nextjs\";\nexport const PKG_VERSION = \"0.4.4\";\n","import { NextResponse } from 'next/server';\nimport { NextMiddleware } from 'next/server';\nimport {\n  CookieOptions,\n  createServerSupabaseClient,\n  parseCookies,\n  serializeCookie\n} from '@supabase/auth-helpers-shared';\nimport { SupabaseClient, User } from '@supabase/supabase-js';\nimport { PKG_NAME, PKG_VERSION } from '../constants';\n\nclass NoPermissionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NoPermissionError';\n  }\n}\n\nexport const withMiddlewareAuth =\n  <\n    Database = any,\n    SchemaName extends string & keyof Database = 'public' extends keyof Database\n      ? 'public'\n      : string & keyof Database\n  >(\n    options: {\n      /**\n       * Path relative to the site root to redirect an\n       * unauthenticated visitor.\n       *\n       * The original request route will be appended via\n       * a `redirectedFrom` query parameter, ex: `?redirectedFrom=%2Fdashboard`\n       */\n      redirectTo?: string;\n      cookieOptions?: CookieOptions;\n      authGuard?: {\n        isPermitted: (\n          user: User,\n          supabase: SupabaseClient<Database, SchemaName>\n        ) => Promise<boolean>;\n        redirectTo: string;\n      };\n    } = {}\n  ): NextMiddleware =>\n  async (req) => {\n    try {\n      if (\n        !process.env.NEXT_PUBLIC_SUPABASE_URL ||\n        !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n      ) {\n        throw new Error(\n          'NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables are required!'\n        );\n      }\n\n      const res = NextResponse.next();\n\n      const supabase = createServerSupabaseClient<Database, SchemaName>({\n        supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,\n        supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n        getCookie(name) {\n          const cookies = parseCookies(req.headers.get('cookie') ?? '');\n          return cookies[name];\n        },\n        setCookie(name, value, options) {\n          const newSessionStr = serializeCookie(name, value, {\n            ...options,\n            // Allow supabase-js on the client to read the cookie as well\n            httpOnly: false\n          });\n          res.headers.append(name, newSessionStr);\n        },\n        getRequestHeader: (key) => {\n          const header = res.headers.get(key) ?? undefined;\n\n          return header;\n        },\n        options: {\n          global: {\n            headers: {\n              'X-Client-Info': `${PKG_NAME}@${PKG_VERSION}`\n            }\n          }\n        },\n        cookieOptions: options.cookieOptions\n      });\n\n      const {\n        data: { session },\n        error\n      } = await supabase.auth.getSession();\n\n      if (error) {\n        throw new Error(\n          `Authorization error, redirecting to login page: ${error.message}`\n        );\n      } else if (!session) {\n        throw new Error('No auth session, redirecting');\n      } else if (\n        options.authGuard &&\n        !(await options.authGuard.isPermitted(session.user, supabase))\n      ) {\n        throw new NoPermissionError('User is not permitted, redirecting');\n      }\n\n      // Authentication successful, forward request to protected route\n      return res;\n    } catch (err: unknown) {\n      let { redirectTo = '/' } = options;\n      if (\n        err instanceof NoPermissionError &&\n        !!options?.authGuard?.redirectTo\n      ) {\n        redirectTo = options.authGuard.redirectTo;\n      }\n      if (err instanceof Error) {\n        console.log(\n          `Could not authenticate request, redirecting to ${redirectTo}:`,\n          err\n        );\n      }\n      const redirectUrl = req.nextUrl.clone();\n      redirectUrl.pathname = redirectTo;\n      redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname);\n      // Authentication failed, redirect request\n      return NextResponse.redirect(redirectUrl);\n    }\n  };\n","import {\n  CookieNotParsed,\n  CookieOptions,\n  createServerSupabaseClient,\n  AuthHelperError,\n  filterCookies,\n  ensureArray,\n  serializeCookie\n} from '@supabase/auth-helpers-shared';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { GetServerSideProps, GetServerSidePropsContext } from 'next';\nimport { PKG_NAME, PKG_VERSION } from '../constants';\nimport { AddParameters } from '../types';\n\n/**\n * ## Protecting Pages with Server Side Rendering (SSR)\n * If you wrap your `getServerSideProps` with {@link withPageAuth} your props object will be augmented with\n * the user object {@link User}\n *\n * ```js\n * // pages/profile.js\n * import { withPageAuth } from '@supabase/auth-helpers-nextjs';\n *\n * export default function Profile({ user }) {\n *   return <div>Hello {user.name}</div>;\n * }\n *\n * export const getServerSideProps = withPageAuth({ redirectTo: '/login' });\n * ```\n *\n * If there is no authenticated user, they will be redirect to your home page, unless you specify the `redirectTo` option.\n *\n * You can pass in your own `getServerSideProps` method, the props returned from this will be merged with the\n * user props.\n *\n * ```js\n * // pages/protected-page.js\n * import { withPageAuth } from '@supabase/auth-helpers-nextjs';\n *\n * export default function ProtectedPage({ user, customProp }) {\n *   return <div>Protected content</div>;\n * }\n *\n * export const getServerSideProps = withPageAuth({\n *   redirectTo: '/foo',\n *   async getServerSideProps(ctx, supabase) {\n *     // Run queries with RLS on the server\n *     const { data } = await supabase.from('test').select('*');\n *     return { props: { data } };\n *   }\n * });\n * ```\n *\n * @category Server\n */\nexport default function withPageAuth<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  ResponseType extends Record<string, any> = any\n>({\n  authRequired = true,\n  redirectTo = '/',\n  getServerSideProps = undefined,\n  cookieOptions = {}\n}: {\n  authRequired?: boolean;\n  redirectTo?: string;\n  getServerSideProps?: AddParameters<\n    GetServerSideProps<ResponseType>,\n    [SupabaseClient<Database, SchemaName>]\n  >;\n  cookieOptions?: CookieOptions;\n} = {}) {\n  return async (context: GetServerSidePropsContext) => {\n    try {\n      if (!context.req.cookies) {\n        throw new CookieNotParsed();\n      }\n\n      if (\n        !process.env.NEXT_PUBLIC_SUPABASE_URL ||\n        !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n      ) {\n        throw new Error(\n          'NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables are required!'\n        );\n      }\n\n      const supabase = createServerSupabaseClient<Database, SchemaName>({\n        supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,\n        supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n        getRequestHeader: (key) => context.req.headers[key],\n\n        getCookie(name) {\n          return context.req.cookies[name];\n        },\n        setCookie(name, value, options) {\n          const newSetCookies = filterCookies(\n            ensureArray(context.res.getHeader('set-cookie')?.toString() ?? []),\n            name\n          );\n          const newSessionStr = serializeCookie(name, value, {\n            ...options,\n            // Allow supabase-js on the client to read the cookie as well\n            httpOnly: false\n          });\n\n          context.res.setHeader('set-cookie', [\n            ...newSetCookies,\n            newSessionStr\n          ]);\n        },\n        options: {\n          global: {\n            headers: {\n              'X-Client-Info': `${PKG_NAME}@${PKG_VERSION}`\n            }\n          }\n        },\n        cookieOptions\n      });\n\n      const {\n        data: { session },\n        error\n      } = await supabase.auth.getSession();\n\n      if (error) {\n        throw error;\n      }\n      if (authRequired && !session) {\n        throw new AuthHelperError('Unauthenticated', 'unauthenticated');\n      }\n\n      let ret: any = { props: {} };\n      if (getServerSideProps) {\n        try {\n          ret = await getServerSideProps(context, supabase);\n        } catch (error) {\n          ret = {\n            props: {\n              error: String(error)\n            }\n          };\n        }\n      }\n\n      return {\n        ...ret,\n        props: {\n          initialSession: session,\n          user: session?.user ?? null,\n          ...ret.props\n        }\n      };\n    } catch (e) {\n      if (authRequired) {\n        return {\n          redirect: {\n            destination: redirectTo,\n            permanent: false\n          }\n        };\n      }\n\n      return { props: {} };\n    }\n  };\n}\n","import {\n  AuthHelperError,\n  CookieOptions,\n  createServerSupabaseClient,\n  ensureArray,\n  filterCookies,\n  serializeCookie\n} from '@supabase/auth-helpers-shared';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { NextApiHandler, NextApiRequest, NextApiResponse } from 'next';\nimport { PKG_NAME, PKG_VERSION } from '../constants';\nimport { AddParameters } from '../types';\n\n/**\n * ## Protecting API routes\n * Wrap an API Route to check that the user has a valid session. If they're not logged in the handler will return a\n * 401 Unauthorized.\n *\n * ```js\n * // pages/api/protected-route.js\n * import { withApiAuth } from '@supabase/auth-helpers-nextjs';\n *\n * export default withApiAuth(async function ProtectedRoute(req, res, supabase) {\n *   // Run queries with RLS on the server\n *   const { data } = await supabase.from('test').select('*');\n *   res.json(data)\n * });\n * ```\n *\n * If you visit `/api/protected-route` without a valid session cookie, you will get a 401 response.\n *\n * @category Server\n */\nexport default function withApiAuth<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  ResponseType = any\n>(\n  handler: AddParameters<\n    NextApiHandler<ResponseType>,\n    [SupabaseClient<Database, SchemaName>]\n  >,\n  options: { cookieOptions?: CookieOptions } = {}\n) {\n  return async (req: NextApiRequest, res: NextApiResponse): Promise<void> => {\n    try {\n      if (\n        !process.env.NEXT_PUBLIC_SUPABASE_URL ||\n        !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n      ) {\n        throw new Error(\n          'NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables are required!'\n        );\n      }\n\n      const supabase = createServerSupabaseClient<Database, SchemaName>({\n        supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,\n        supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n        getCookie(name) {\n          return req.cookies[name];\n        },\n        setCookie(name, value, options) {\n          const newSetCookies = filterCookies(\n            ensureArray(res.getHeader('set-cookie')?.toString() ?? []),\n            name\n          );\n          const newSessionStr = serializeCookie(name, value, {\n            ...options,\n            // Allow supabase-js on the client to read the cookie as well\n            httpOnly: false\n          });\n\n          res.setHeader('set-cookie', [...newSetCookies, newSessionStr]);\n        },\n        getRequestHeader: (key) => {\n          const header = res.getHeader(key);\n          if (typeof header === 'number') {\n            return String(header);\n          }\n\n          return header;\n        },\n        options: {\n          global: {\n            headers: {\n              'X-Client-Info': `${PKG_NAME}@${PKG_VERSION}`\n            }\n          }\n        },\n        cookieOptions: options.cookieOptions\n      });\n\n      const {\n        data: { session },\n        error\n      } = await supabase.auth.getSession();\n\n      if (error) {\n        throw error;\n      }\n\n      if (!session)\n        throw new AuthHelperError('Unauthenticated', 'unauthenticated');\n\n      try {\n        await handler(req, res, supabase);\n      } catch (error) {\n        res.status(500).json({\n          error: String(error)\n        });\n        return;\n      }\n    } catch (error) {\n      res.status(401).json({\n        error: 'not_authenticated',\n        description:\n          'The user does not have an active session or is not authenticated'\n      });\n      return;\n    }\n  };\n}\n","const dev = process.env.NODE_ENV !== 'production';\n\nconst logger = {\n  log: (message?: any, ...optionalParams: any[]) => {\n    dev ? console.log(message, ...optionalParams) : null;\n  },\n  error: (message?: any, ...optionalParams: any[]) => {\n    console.error(message, ...optionalParams);\n  },\n  info: (message?: any, ...optionalParams: any[]) => {\n    logger.log(message, ...optionalParams);\n  },\n  debug: (message?: any, ...optionalParams: any[]) => {\n    logger.log(message, ...optionalParams);\n  },\n  warn: (message?: any, ...optionalParams: any[]) => {\n    dev ? logger.error(message, ...optionalParams) : null;\n  }\n};\n\nexport default logger;\n"],"mappings":"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","names":["createServerSupabaseClient","import_auth_helpers_shared","_a","options","import_auth_helpers_shared","_a","error","import_auth_helpers_shared","options","error","_createBrowserSupabaseClient","createServerSupabaseClient","_createServerSupabaseClient"]}